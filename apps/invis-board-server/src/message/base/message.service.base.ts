/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Message as PrismaMessage,
  KeyFragment as PrismaKeyFragment,
} from "@prisma/client";
import { MessageEncryptionInputDto } from "../MessageEncryptionInputDto";
import { MessageEncryptionOutputDto } from "../MessageEncryptionOutputDto";
import { MessageFragmentationInputDto } from "../MessageFragmentationInputDto";
import { MessageFragmentationOutputDto } from "../MessageFragmentationOutputDto";
import { MessageRetrievalInputDto } from "../MessageRetrievalInputDto";
import { MessageRetrievalOutputDto } from "../MessageRetrievalOutputDto";
import { GovernanceVotingInputDto } from "../GovernanceVotingInputDto";
import { GovernanceVotingOutputDto } from "../GovernanceVotingOutputDto";

export class MessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MessageCountArgs, "select">): Promise<number> {
    return this.prisma.message.count(args);
  }

  async messages(args: Prisma.MessageFindManyArgs): Promise<PrismaMessage[]> {
    return this.prisma.message.findMany(args);
  }
  async message(
    args: Prisma.MessageFindUniqueArgs
  ): Promise<PrismaMessage | null> {
    return this.prisma.message.findUnique(args);
  }
  async createMessage(args: Prisma.MessageCreateArgs): Promise<PrismaMessage> {
    return this.prisma.message.create(args);
  }
  async updateMessage(args: Prisma.MessageUpdateArgs): Promise<PrismaMessage> {
    return this.prisma.message.update(args);
  }
  async deleteMessage(args: Prisma.MessageDeleteArgs): Promise<PrismaMessage> {
    return this.prisma.message.delete(args);
  }

  async findKeyFragments(
    parentId: string,
    args: Prisma.KeyFragmentFindManyArgs
  ): Promise<PrismaKeyFragment[]> {
    return this.prisma.message
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyFragments(args);
  }
  async EncryptMessage(
    args: MessageEncryptionInputDto
  ): Promise<MessageEncryptionOutputDto> {
    throw new Error("Not implemented");
  }
  async FragmentMessage(
    args: MessageFragmentationInputDto
  ): Promise<MessageFragmentationOutputDto> {
    throw new Error("Not implemented");
  }
  async RetrieveMessage(
    args: MessageRetrievalInputDto
  ): Promise<MessageRetrievalOutputDto> {
    throw new Error("Not implemented");
  }
  async SubmitVote(
    args: GovernanceVotingInputDto
  ): Promise<GovernanceVotingOutputDto> {
    throw new Error("Not implemented");
  }
}
