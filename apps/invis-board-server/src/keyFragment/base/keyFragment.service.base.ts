/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  KeyFragment as PrismaKeyFragment,
  Message as PrismaMessage,
  Node as PrismaNode,
} from "@prisma/client";

export class KeyFragmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KeyFragmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.keyFragment.count(args);
  }

  async keyFragments(
    args: Prisma.KeyFragmentFindManyArgs
  ): Promise<PrismaKeyFragment[]> {
    return this.prisma.keyFragment.findMany(args);
  }
  async keyFragment(
    args: Prisma.KeyFragmentFindUniqueArgs
  ): Promise<PrismaKeyFragment | null> {
    return this.prisma.keyFragment.findUnique(args);
  }
  async createKeyFragment(
    args: Prisma.KeyFragmentCreateArgs
  ): Promise<PrismaKeyFragment> {
    return this.prisma.keyFragment.create(args);
  }
  async updateKeyFragment(
    args: Prisma.KeyFragmentUpdateArgs
  ): Promise<PrismaKeyFragment> {
    return this.prisma.keyFragment.update(args);
  }
  async deleteKeyFragment(
    args: Prisma.KeyFragmentDeleteArgs
  ): Promise<PrismaKeyFragment> {
    return this.prisma.keyFragment.delete(args);
  }

  async getMessage(parentId: string): Promise<PrismaMessage | null> {
    return this.prisma.keyFragment
      .findUnique({
        where: { id: parentId },
      })
      .message();
  }

  async getNode(parentId: string): Promise<PrismaNode | null> {
    return this.prisma.keyFragment
      .findUnique({
        where: { id: parentId },
      })
      .node();
  }
}
