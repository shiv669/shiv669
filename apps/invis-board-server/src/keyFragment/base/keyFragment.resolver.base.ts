/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { KeyFragment } from "./KeyFragment";
import { KeyFragmentCountArgs } from "./KeyFragmentCountArgs";
import { KeyFragmentFindManyArgs } from "./KeyFragmentFindManyArgs";
import { KeyFragmentFindUniqueArgs } from "./KeyFragmentFindUniqueArgs";
import { CreateKeyFragmentArgs } from "./CreateKeyFragmentArgs";
import { UpdateKeyFragmentArgs } from "./UpdateKeyFragmentArgs";
import { DeleteKeyFragmentArgs } from "./DeleteKeyFragmentArgs";
import { Message } from "../../message/base/Message";
import { Node } from "../../node/base/Node";
import { KeyFragmentService } from "../keyFragment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KeyFragment)
export class KeyFragmentResolverBase {
  constructor(
    protected readonly service: KeyFragmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KeyFragment",
    action: "read",
    possession: "any",
  })
  async _keyFragmentsMeta(
    @graphql.Args() args: KeyFragmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KeyFragment])
  @nestAccessControl.UseRoles({
    resource: "KeyFragment",
    action: "read",
    possession: "any",
  })
  async keyFragments(
    @graphql.Args() args: KeyFragmentFindManyArgs
  ): Promise<KeyFragment[]> {
    return this.service.keyFragments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KeyFragment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KeyFragment",
    action: "read",
    possession: "own",
  })
  async keyFragment(
    @graphql.Args() args: KeyFragmentFindUniqueArgs
  ): Promise<KeyFragment | null> {
    const result = await this.service.keyFragment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KeyFragment)
  @nestAccessControl.UseRoles({
    resource: "KeyFragment",
    action: "create",
    possession: "any",
  })
  async createKeyFragment(
    @graphql.Args() args: CreateKeyFragmentArgs
  ): Promise<KeyFragment> {
    return await this.service.createKeyFragment({
      ...args,
      data: {
        ...args.data,

        message: args.data.message
          ? {
              connect: args.data.message,
            }
          : undefined,

        node: args.data.node
          ? {
              connect: args.data.node,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KeyFragment)
  @nestAccessControl.UseRoles({
    resource: "KeyFragment",
    action: "update",
    possession: "any",
  })
  async updateKeyFragment(
    @graphql.Args() args: UpdateKeyFragmentArgs
  ): Promise<KeyFragment | null> {
    try {
      return await this.service.updateKeyFragment({
        ...args,
        data: {
          ...args.data,

          message: args.data.message
            ? {
                connect: args.data.message,
              }
            : undefined,

          node: args.data.node
            ? {
                connect: args.data.node,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KeyFragment)
  @nestAccessControl.UseRoles({
    resource: "KeyFragment",
    action: "delete",
    possession: "any",
  })
  async deleteKeyFragment(
    @graphql.Args() args: DeleteKeyFragmentArgs
  ): Promise<KeyFragment | null> {
    try {
      return await this.service.deleteKeyFragment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Message, {
    nullable: true,
    name: "message",
  })
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async getMessage(
    @graphql.Parent() parent: KeyFragment
  ): Promise<Message | null> {
    const result = await this.service.getMessage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Node, {
    nullable: true,
    name: "node",
  })
  @nestAccessControl.UseRoles({
    resource: "Node",
    action: "read",
    possession: "any",
  })
  async getNode(@graphql.Parent() parent: KeyFragment): Promise<Node | null> {
    const result = await this.service.getNode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
