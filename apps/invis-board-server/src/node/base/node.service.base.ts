/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Node as PrismaNode,
  KeyFragment as PrismaKeyFragment,
} from "@prisma/client";

export class NodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NodeCountArgs, "select">): Promise<number> {
    return this.prisma.node.count(args);
  }

  async nodes(args: Prisma.NodeFindManyArgs): Promise<PrismaNode[]> {
    return this.prisma.node.findMany(args);
  }
  async node(args: Prisma.NodeFindUniqueArgs): Promise<PrismaNode | null> {
    return this.prisma.node.findUnique(args);
  }
  async createNode(args: Prisma.NodeCreateArgs): Promise<PrismaNode> {
    return this.prisma.node.create(args);
  }
  async updateNode(args: Prisma.NodeUpdateArgs): Promise<PrismaNode> {
    return this.prisma.node.update(args);
  }
  async deleteNode(args: Prisma.NodeDeleteArgs): Promise<PrismaNode> {
    return this.prisma.node.delete(args);
  }

  async findKeyFragments(
    parentId: string,
    args: Prisma.KeyFragmentFindManyArgs
  ): Promise<PrismaKeyFragment[]> {
    return this.prisma.node
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .keyFragments(args);
  }
}
